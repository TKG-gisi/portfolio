{"version":3,"sources":["components/Top.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","useState","colorGradient","setColorGradient","onScroll","position","Math","max","window","pageYOffset","document","documentElement","scrollTop","body","console","log","useEffect","addEventListener","removeEventListener","scrollStyle","backgroundColor","String","style","class","href","Top","id","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAYaA,EAAS,WAAO,IAAD,EACgBC,mBAAS,GADzB,mBACnBC,EADmB,KACJC,EADI,KAGpBC,EAAW,WACf,IAAMC,EAXDC,KAAKC,IACVC,OAAOC,YACPC,SAASC,gBAAgBC,UACzBF,SAASG,KAAKD,WASdE,QAAQC,IAAIV,GAEVF,EADEE,GAAY,IACG,EAEAA,EAAS,MAI9BW,qBAAU,WAER,OADAN,SAASO,iBAAiB,SAAUb,GAC7B,kBAAMM,SAASQ,oBAAoB,SAAUd,OAGtD,IAIOe,EAAc,CACnBC,gBAAiB,QALJC,OAAO,IAAM,GAAKnB,GAKK,IAJvBmB,OAAO,IAAM,GAAKnB,GAIoB,IAHtCmB,OAAO,IAAM,IAAMnB,GAGkC,IAFrDmB,OAAO,GAAM,GAAMnB,GAEiD,KAGnF,OACE,4BAAQoB,MAAOH,GACb,wBAAII,MAAM,UACR,4BAAI,uBAAGC,KAAK,SAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,WAAR,WACJ,4BAAI,uBAAGA,KAAK,UAAR,aAOG,SAASC,IACpB,OACI,yBAAKC,GAAG,WAEJ,kBAAC,EAAD,MACA,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAZ5C,cCzCOC,MARf,WACE,OACE,6BACE,kBAACF,EAAD,QCKcG,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ec783f32.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"../index.css\"\n\n\nconst scrollTop = () => {\n  return Math.max(\n    window.pageYOffset, \n    document.documentElement.scrollTop, \n    document.body.scrollTop\n  );\n};\n\nexport const NavBar = () => {\n  const [colorGradient, setColorGradient] = useState(0);\n\n  const onScroll = () => {\n    const position = scrollTop();\n    console.log(position)\n    if (position >= 450) {\n      setColorGradient(1);\n    } else {\n      setColorGradient(position/450);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", onScroll);\n    return () => document.removeEventListener(\"scroll\", onScroll);\n  });\n\n  const colorR = String(126 - 76 * colorGradient);\n  const colorG = String(123 - 73 * colorGradient);\n  const colorB = String(215 - 165 * colorGradient);\n  const colorA = String(0.2 + 0.8 * colorGradient);\n  const  scrollStyle = {\n    backgroundColor: \"rgba(\" + colorR + \",\" + colorG + \",\" + colorB + \",\" + colorA + \")\"\n  }\n\n  return (\n    <header style={scrollStyle}>\n      <ul class=\"topnav\">\n        <li><a href=\"#home\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n        <li><a href=\"#skills\">Skills</a></li>\n        <li><a href=\"#works\">Works</a></li>\n      </ul>\n    </header>\n  );\n};\n\n\nexport default function Top() {\n    return (\n        <div id=\"topview\" >\n            \n            <NavBar/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/><br/><br/><br/><br/><br/><br/>\n            hogehogeho\n        </div>\n    )\n}","import React from 'react';\nimport Top from './components/Top'\n\n\nfunction App() {\n  return (\n    <div>\n      <Top />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}